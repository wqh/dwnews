<?php/** * @评论功能 * @author Frank */class CommentController extends Controller {	/**	 *	 * @var $conn Mongodb 连接句柄	 */	public $conn;	/**	 *	 * @var 表空间	 */	public $collection;	/**	 *	 * @var 执行query	 */	private $query;	/**	 *	 * @var 评论关系总表 结果集	 */	private $relation;	/**	 *	 * @var 加工后关系列表 主要用于盖楼	 */	private $relation_list = array ();	/**	 *	 * @var $identification 分割符	 */	private $identification = '_';	/**	 *	 * @var $product 用于取所有不重复的数据	 */	private $product = array ();	/**	 *	 * @var $_temp 临时转换数据	 */	private $_temp;	/**	 *	 * @var $_flag 标记文件用于分割 '_'	 */	private $_flag;	/**	 *	 * @var $devanning 拆箱	 */	private $devanning;	/**	 *	 * @var $packing 装箱	 */	private $packing;	/**	 *	 * @var $floorData 评论最终数据	 */	private $floorData;	/**	 *	 * @var $commentItemData 评论单项数据	 */	private $commentItemData;	/**	 * @初始化应用数据	 */	public function init() {		$this->layout = false;		parent::init ();		$this->mongoInit ();	}	public function actionIndex() {		/**		 * 测试数据		 * db.comment.remove({"_id":"0883B740-C3AE-8EF0-C03E-15128FEF6142"})		 * db.comment.insert({ "_id" : "0883B740-C3AE-8EF0-C03E-15128FEF6142", "0" : "1_2_3_4_5", "1" : "1_3_4_5", "2" : "6_2_1_8", "3" : "1_9_2_3", "4" : "4_5_6_7", "5" : "1_2_8_9","5":"5","6":"5_2_9","7":"8","9":"1_9_7_5_3_7_499_23432_23423","10":"312321_23432_444_222","11":"1234_32423_22_12313_23123_3123_23432_455_21312_5436_645_4353_1234_5463546_7657_232_324_21312_4234_56435_2234_" })		 */				// echo '<pre>';		$this->getRelation ( '0883B740-C3AE-8EF0-C03E-15128FEF6142' );		// print_r ( $this->relation_list );//显示关系		// array_multisort				$this->packingData (); // 从mongodb中取出数据		$this->getCommentItem (); // 根据id取出评论数据		                          // print_r ( $this->product );				$this->makeFloor (); // 根据关系建造楼		/**		 * 建楼完成，前台显示		 */		$this->render ( 'index', array (				'html' => $this->floorData 		) );		unset ( $this->floorData );	}	/**	 * *	 * @mongodb 数据库初始化	 */	public function mongoInit() {		try {			$this->conn = new MongoClient ();			$this->collection = $this->conn->selectCollection ( 'm', 'comment' );		} catch ( MongoConnectionException $e ) {			echo '<p>Couldn\'t connect to mongodb, is the "mongo" process running?</p>';			exit ();		}	}	/**	 * *	 * @取出评论关系数据 1_2_3_4_5	 */	public function getRelation($id) {		$this->query = array (				'_id' => $id 		);		$this->relation = $this->collection->find ( $this->query );		foreach ( $this->relation as $value ) {			unset ( $value ['_id'] );			$this->relation_list = $value;		}	}	/**	 * *	 * @取出要查找的评论id去掉重复值	 * @强制转化为数字键值拆分数组，	 */	public function packingData() {		foreach ( $this->relation_list as $v ) {			$this->_flag = ($v != end ( $this->relation_list )) ? $this->identification : '';			$this->_temp .= $v . $this->_flag;		}		$this->devanning = implode ( ',', array_unique ( explode ( '_', $this->_temp ) ) );		$this->packing = explode ( ',', $this->devanning );		foreach ( $this->packing as $value ) {			$this->product [] = ( int ) $value;		}	}	/**	 * *	 * @建楼主入口	 *	 * @throws Exception	 */	public function makeFloor() {		try {			if (is_array ( $this->relation_list )) {				krsort ( $this->relation_list );				foreach ( $this->relation_list as $key => $value ) {					$this->floorData [] = $this->getItem ( $key, $value ); // 根据节点1_2_3_4_5查找楼层数据				}			} else {				throw new Exception ( 'data error' );			}		} catch ( Exception $e ) {			echo $e->getMessage ();		}	}	/**	 * @根据评论ID展示楼层	 * @渲染数据	 *	 * @param unknown $parentkey	 *        	@父亲key	 * @param unknown $item	 *        	@父亲关系	 * @throws Exception	 * @return string	 */	public function getItem($parentkey, $item) {		try {			$_frontHtml = '';			$items = explode ( '_', $item );			$lev = count ( $items ); // 总楼层级			if (is_array ( $items )) {				if ($lev == 1) {					$_foors = '';				} else {					$_foors = 1;				}				foreach ( $items as $key => $v ) {					if (is_array ( $this->commentItemData )) {						$count = count ( $this->commentItemData );						for($i = 0; $i < $count; $i ++) {							if ($this->commentItemData [$i] ['id'] == $v) {								$author = $this->commentItemData [$i] ['author'];								$comment = $this->substrCut ( $this->commentItemData [$i] ['comment'], 50 ); // 取50个汉字								$date = $this->commentItemData [$i] ['date'];								$commentid = $this->commentItemData [$i] ['id'];								$_id = "'" . $this->commentItemData [$i] ['_id'] . "'";								$support = isset ( $this->commentItemData [$i] ['support'] ) ? $this->commentItemData [$i] ['support'] : '0'; // 顶数据							}						}						$frontDiv = $v . $parentkey . $key; // 构造回复评论级						$_floor = $_foors ? $_foors . '楼' : ''; // 如果是1级则不显示楼层						$_form = '<div class="box" style="display:none" id="shwo_' . $frontDiv . '">								  <form action="m.php" id="' . $frontDiv . '" method="post" enctype="multipart/form-data">								    <div> 标题:								      <input name="title" id="title_' . $frontDiv . '" value="" size="50">								      <br />								      <br />								      内容:								      <textarea name="content" id="content_' . $frontDiv . '" cols="60" rows="5" style="padding:10px;">我要回复</textarea>								      <br>								      <br>								      <input type="hidden" name="articleid" id="articleid" value="0883B740-C3AE-8EF0-C03E-15128FEF6142">								      <input type="hidden" name="commentid" id="commentid_' . $commentid . '" value="' . $commentid . '">								      <input type="hidden" name="authorid" id="authorid" value="509">								      <input type="hidden" name="id" id="id_' . $v . '" value="' . $v . '">								      <br>								      <br>								      <input type="submit" name="submit_on" value="提交" onclick="post(' . $frontDiv . ');" class="btn">								    </div>								  </form>								</div>';						$_frontHtml = '<div class="box" id="dwnews_' . $v . '">' . $_frontHtml . '作者:' . $author . '<h1>' . $date . '</h1>' . $comment . '<span>' . $_floor . '</span><ul><li><a href="javascript:show(' . $frontDiv . ',' . $commentid . ');">回复</a></li><li><a href="javascript:Support(' . $_id . ',' . $frontDiv . ')">顶</a><span id=support_show_' . $frontDiv . '>[' . $support . ']</span></li></ul>' . $_form . '</div>';						$_foors ++;						unset ( $frontDiv );					} else {						throw new Exception ( '实际评论单项数据' );					}				}				return $_frontHtml;			} else {				throw new Exception ( '根据评论ID展示楼层有问题' );			}		} catch ( Exception $e ) {			echo $e->getMessage () . __LINE__;		}	}	/**	 * @实际评论单项数据	 *	 * @throws Excepition	 */	public function getCommentItem() {		try {			if (is_array ( $this->product )) {				$query = array (						'id' => array (								'$in' => $this->product 						) 				);				$cursor = $this->collection->find ( $query );				foreach ( $cursor as $v ) {					$this->commentItemData [] = $v;				}			} else {				throw new Excepition ( '单项评论in操作有问题' );			}		} catch ( Exception $e ) {			echo $e->getMessage () . __LINE__;		}	}	/**	 * @字符串截取中文或英文	 *	 * @param unknown $str_cut        		 * @param unknown $length        		 * @return string	 */	public function substrCut($str_cut, $length) {		if (strlen ( $str_cut ) > $length) {			for($i = 0; $i < $length; $i ++)				if (ord ( $str_cut [$i] ) > 128)					$i ++;			$str_cut = substr ( $str_cut, 0, $i ) . "...";		}		return $str_cut;	}	/**	 * *	 * @主要用于生成hash评论主键	 *	 * @param unknown $pares        		 */	public function makeHash($pares) {		return hash ( 'sha1', $pares . time () );	}	/**	 * 生成不重复的随机数	 *	 * @param unknown $param        		 * @return string	 */	public function makeRand($param) {		return $param . time () . rand ( 0, 5 );	}	public function actionPost() {		if (Yii::app ()->request->isPostRequest) {			$postData = array (					'id' => $this->makeHash ( Yii::app ()->request->getParam ( 'commentid' ) ),					'author' => Yii::app ()->request->getParam ( 'author' ),					'content' => Yii::app ()->request->getParam ( 'content' ),					'support' => 0,					'date' => new MongoTimestamp () 			);			$this->collection->insert ( $postData );		}	}	/**	 * @顶操作	 */	public function actionSupport() {		$commentid = Yii::app ()->request->getParam ( 'commentid' );		$callback = Yii::app ()->request->getParam ( 'callback' );				$where = array (				'_id' => new MongoId ( $commentid ) 		);		$inc = array (				'support' => 1 		);		$this->collection->update ( $where, array (				'$inc' => $inc 		) );		$cursor = $this->collection->find ( array (				'_id' => new MongoId ( $commentid ) 		) );				foreach ( $cursor as $value ) {			$support = isset ( $value ['support'] ) ? $value ['support'] : 0;		}		Yii::app ()->session ['support_' . $commentid] = $commentid;		$data = array (				'support' => $support,				'stat' => 'ok' 		);		echo $callback . "(" . json_encode ( $data ) . ")";		exit ( 0 );	}}?>